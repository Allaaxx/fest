model Product {
  id             String   @id @default(uuid())
  name           String
  description    String
  type           String // "venda" | "locacao" | "servico"
  price          Float
  status         String // "pending" | "approved" | "rejected" | "active" | "inactive"
  vendorProfileId String
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id])
  categoryId     String
  category       Category @relation(fields: [categoryId], references: [id])
  createdAt      DateTime @default(now())
  reviewedAt     DateTime?
  reviewedBy     String?
  rejectionReason String?
  sales          Int      @default(0)
  views          Int      @default(0)
  rating         Float    @default(0)
  totalReviews   Int      @default(0)
}
model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String  @unique
  description String?
  status      String   @default("active")
  parentId    String?
  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             String   @id @default(uuid())
  name           String?
  surname        String?
  email          String   @unique
  password       String
  role           Role     @default(CLIENTE)
  emailVerified  DateTime?
  validationToken String?  // Token para validação de e-mail
  resetToken        String?  // Token para reset de senha
  resetTokenExpires DateTime? // Expiração do token de reset
  phone          String?
  address        String?
  cep            String?
  cpf            String?
  profileImage   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  vendorProfile  VendorProfile?
}

model VendorProfile {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])

  companyName   String
  companyType   String
  description   String
  rg            String
  cpfDoc        String
  comprovante   String
  bankName      String
  accountType   String
  agency        String
  account       String
  number        String
  neighborhood  String
  city          String
  state         String

  products      Product[]
  // Adicione outros campos específicos do vendedor conforme necessário
}

enum Role {
  CLIENTE
  ADMIN
  VENDEDOR
}